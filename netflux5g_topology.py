#!/usr/bin/env python

"""
NetFlux5G - Mininet-WiFi Topology
Generated by NetFlux5G Editor
Generated on: Kam Jul 10 06:28:50 2025
Docker Network: netflux5g

This script creates a network topology using mininet-wifi
with dynamic configuration from the NetFlux5G UI.

5G Configuration Files:
- Located in: ./5g-configs/ directory (relative to this script)
- Contains imported YAML configuration files for 5G core components
- Simplified naming scheme: {component_type}.yaml (e.g., upf.yaml, amf.yaml)
- Multiple instances: {component_type}_{index}.yaml (e.g., upf_2.yaml)
- Volume mounted as: /opt/open5gs/etc/open5gs/{component_type}.yaml inside containers
- Mount these configs into Docker containers as needed

Network Mode Configuration:
- All Docker components (UEs, gNBs, 5G Core) use the universal netflux5g network
- Database, WebUI, Monitoring, and Controller services also use netflux5g network
- Current network mode: netflux5g

Docker Network Usage:
- Network Name: netflux5g
- Type: Bridge network with attachable containers
- Create network: docker network create --driver bridge --attachable netflux5g
- Delete network: docker network rm netflux5g
"""

import sys
import os
from subprocess import call

# Fix Python path for containernet
containernet_path = "/home/melon/containernet"
if containernet_path not in sys.path:
    sys.path.insert(0, containernet_path)

# Import in a specific order to avoid circular imports
# Also add check for network backend availability
NETWORK_BACKEND = None
DockerSta = None
CLI = None
makeTerm2 = None
Station = None
OVSKernelAP = None
ContainernetClass = None

try:
    # Import mininet utilities first
    from mininet.log import setLogLevel, info
    
    # Import base modules before complex ones
    import mininet.util
    import mininet.node
    
    # Now safe to import from mininet.link
    from mininet.link import TCLink, Link, Intf
    from mininet.node import RemoteController, OVSKernelSwitch, Host, Node
    
    # Try to import containernet
    try:
        from containernet.net import Containernet as ContainernetClass
        from containernet.cli import CLI
        from containernet.node import DockerSta
        from containernet.term import makeTerm as makeTerm2
        NETWORK_BACKEND = "containernet"
        print("‚úÖ Using Containernet with Docker support")
    except ImportError:
        try:
            # Fallback to mininet-wifi
            from mn_wifi.net import Mininet_wifi as ContainernetClass
            from mn_wifi.cli import CLI_wifi as CLI
            from mn_wifi.node import DockerSta
            from mininet.term import makeTerm as makeTerm2
            NETWORK_BACKEND = "mininet-wifi"
            print("‚ö†Ô∏è  Using Mininet-WiFi (limited Docker support)")
        except ImportError:
            # Final fallback to standard mininet
            from mininet.net import Mininet as ContainernetClass
            from mininet.cli import CLI
            from mininet.node import Host as DockerSta
            from mininet.term import makeTerm as makeTerm2
            NETWORK_BACKEND = "mininet"
            print("‚ö†Ô∏è  Using standard Mininet (no Docker/WiFi support)")
    
    # Try to import wifi modules
    try:
        from mn_wifi.node import Station, OVSKernelAP
        from mn_wifi.link import wmediumd
        from mn_wifi.wmediumdConnector import interference
        print("‚úÖ WiFi modules available")
    except ImportError:
        # Create fallbacks for missing WiFi functionality
        Station = Host  # Fallback to regular host
        OVSKernelAP = OVSKernelSwitch  # Fallback to switch
        wmediumd = TCLink  # Fallback to regular link
        interference = None
        print("‚ö†Ô∏è  WiFi modules not available - using fallbacks")
    
    print("‚úÖ All imports successful!")
    
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üí° Try running the fix script first:")
    print("   cd netflux5g-editor && python3 fix_imports.py")
    sys.exit(1)


def sanitize_name(name):
    """Convert display name to valid Python variable name."""
    import re
    # Remove special characters and spaces
    clean_name = re.sub(r'[^a-zA-Z0-9_]', '_', name)
    # Ensure it starts with a letter or underscore
    if clean_name and clean_name[0].isdigit():
        clean_name = '_' + clean_name
    return clean_name or 'node'

def get_5g_config_path(component_type, index=1):
    """Get path to 5G configuration file for a component type."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    configs_dir = os.path.join(script_dir, "5g-configs")
    
    # Use simplified naming scheme (0-based internally, 1-based for user)
    comp_type = component_type.lower()
    
    # Convert 1-based user index to 0-based internal index
    internal_index = index - 1
    
    if internal_index == 0:
        # First instance uses simple name: upf.yaml
        config_file = f"{comp_type}.yaml"
    else:
        # Additional instances use numbered names: upf_2.yaml (user index)
        config_file = f"{comp_type}_{index}.yaml"
    
    config_path = os.path.join(configs_dir, config_file)
    
    # Check if file exists, return path regardless
    return config_path

def list_5g_configs():
    """List all available 5G configuration files."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    configs_dir = os.path.join(script_dir, "5g-configs")
    
    if os.path.exists(configs_dir):
        import glob
        configs = glob.glob(os.path.join(configs_dir, "*.yaml"))
        configs.extend(glob.glob(os.path.join(configs_dir, "*.yml")))
        return [os.path.basename(c) for c in configs]
    else:
        return []

def check_5g_configs():
    """Check if required 5G configuration files exist and warn about missing files."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    configs_dir = os.path.join(script_dir, "5g-configs")
    
    if not os.path.exists(configs_dir):
        print("WARNING: 5g-configs directory not found!")
        print("Run the NetFlux5G automation to copy configuration files.")
        return False
    
    configs = list_5g_configs()
    if configs:
        print(f"Found {len(configs)} 5G configuration files:")
        for config in configs:
            print(f"  - {config}")
        return True
    else:
        print("WARNING: No 5G configuration files found in 5g-configs directory!")
        print("Import configuration files in VGcore component properties first.")
        return False

def check_docker_network():
    """Check if the required Docker network exists."""
    import subprocess
    network_name = "netflux5g"
    try:
        result = subprocess.run(
            ["docker", "network", "ls", "--filter", f"name={network_name}", "--format", "{{.Name}}"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            networks = result.stdout.strip().split('\n')
            return network_name in networks
        return False
    except Exception:
        return False

def create_docker_network_if_needed():
    """Create Docker network if it doesn't exist."""
    import subprocess
    network_name = "netflux5g"
    
    if check_docker_network():
        print(f"Docker network '{network_name}' already exists")
        return True
    
    print(f"Creating Docker network: {network_name}")
    try:
        result = subprocess.run(
            ["docker", "network", "create", "--driver", "bridge", "--attachable", network_name],
            capture_output=True, text=True, timeout=30
        )
        if result.returncode == 0:
            print(f"Successfully created Docker network: {network_name}")
            return True
        else:
            print(f"Failed to create Docker network: {result.stderr}")
            return False
    except Exception as e:
        print(f"Error creating Docker network: {e}")
        return False

def topology(args):
    """Create network topology."""
    
    # Check for 5G configuration files
    info("*** Checking 5G configuration files\n")
    check_5g_configs()
    
    # Setup Docker network
    info("*** Setting up universal Docker network\n")
    create_docker_network_if_needed()
    
    # Universal network mode for all NetFlux5G components
    NETWORK_MODE = "netflux5g"
    info(f"*** Using universal Docker network: {NETWORK_MODE}\n")
    
    # Create network with appropriate backend
    print(f"üîç Network backend detected: {NETWORK_BACKEND}")
    print(f"üîç ContainernetClass type: {ContainernetClass}")
    
    if NETWORK_BACKEND == "containernet":
        # Create Containernet with basic configuration
        net = ContainernetClass(topo=None,
                               build=False,
                               ipBase='10.0.0.0/8')
        print(f"‚úÖ Created Containernet instance: {type(net)}")
        
        # Verify it's actually Containernet and not Mininet
        if 'containernet' in str(type(net)).lower():
            print("‚úÖ Confirmed: Real Containernet instance")
        elif 'mininet' in str(type(net)).lower():
            print("‚ö†Ô∏è  WARNING: Got Mininet instead of Containernet!")
            # This means Containernet import failed, add fallback
            if not hasattr(net, 'addDocker'):
                def addDocker_fallback(name, **kwargs):
                    print(f"‚ö†Ô∏è  Adding {name} as regular host (Containernet not working)")
                    host_kwargs = {}
                    if 'ip' in kwargs:
                        host_kwargs['ip'] = kwargs['ip']
                    if 'mac' in kwargs:
                        host_kwargs['mac'] = kwargs['mac']
                    return net.addHost(name, **host_kwargs)
                net.addDocker = addDocker_fallback
                
    elif NETWORK_BACKEND == "mininet-wifi":
        # Create Mininet-WiFi network
        net = ContainernetClass(topo=None,
                               build=False,
                               ipBase='10.0.0.0/8')
        print(f"‚úÖ Created Mininet-WiFi instance: {type(net)}")
    else:
        # Create standard Mininet network
        net = ContainernetClass(topo=None,
                               build=False,
                               ipBase='10.0.0.0/8')
        # Override addDocker method for standard Mininet
        def addDocker_fallback(name, **kwargs):
            # Remove Docker-specific parameters and add as regular host
            host_kwargs = {}
            if 'ip' in kwargs:
                host_kwargs['ip'] = kwargs['ip']
            if 'mac' in kwargs:
                host_kwargs['mac'] = kwargs['mac']
            print(f"‚ö†Ô∏è  Adding {name} as regular host (Docker not supported)")
            return net.addHost(name, **host_kwargs)
        
        net.addDocker = addDocker_fallback
        print(f"‚úÖ Created Mininet instance with Docker fallback: {type(net)}")
    
    # Universal fallback - ensure addDocker method exists
    if not hasattr(net, 'addDocker'):
        print("‚ùå addDocker method not found - adding emergency fallback")
        def addDocker_emergency_fallback(name, **kwargs):
            print(f"üö® Emergency fallback: Adding {name} as regular host")
            return net.addHost(name)
        net.addDocker = addDocker_emergency_fallback
    else:
        print("‚úÖ addDocker method is available")                          

    info("*** Adding controller\n")
    Controller__1 = net.addController(name='Controller__1',
                                   controller=RemoteController,
                                   ip='127.0.0.1',
                                   port=6653)  # Changed to 6633 for Ryu controller

    info("*** Creating nodes\n")
    Switch__6 = net.addSwitch('Switch__6', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__5 = net.addSwitch('Switch__5', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__4 = net.addSwitch('Switch__4', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__3 = net.addSwitch('Switch__3', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__2 = net.addSwitch('Switch__2', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__1 = net.addSwitch('Switch__1', cls=OVSKernelSwitch, protocols="OpenFlow13")

    export_dir = os.path.dirname(os.path.abspath(__file__))  # Current Working Directory

    info("*** Add UPF (2 instances)\n")
    info("    Creating UPF instance 1/2: upf1\n")
    info("      Config file: upf.yaml\n")
    upf1 = net.addDocker('upf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, privileged=True, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/upf.yaml:/opt/open5gs/etc/open5gs/upf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "ENABLE_NAT=true", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("    Creating UPF instance 2/2: upf2\n")
    info("      Config file: upf_2.yaml\n")
    upf2 = net.addDocker('upf2', cap_add=["net_admin"], network_mode=NETWORK_MODE, privileged=True, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/upf_2.yaml:/opt/open5gs/etc/open5gs/upf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "ENABLE_NAT=true", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add AMF (1 instances)\n")
    info("    Creating AMF instance 1/1: amf1\n")
    info("      Config file: amf.yaml\n")
    amf1 = net.addDocker('amf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/amf.yaml:/opt/open5gs/etc/open5gs/amf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0", "MCC=999", "MNC=70", "TAC=1", "SST=1", "SD=0xffffff", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add SMF (1 instances)\n")
    info("    Creating SMF instance 1/1: smf1\n")
    info("      Config file: smf.yaml\n")
    smf1 = net.addDocker('smf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/smf.yaml:/opt/open5gs/etc/open5gs/smf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add NRF (1 instances)\n")
    info("    Creating NRF instance 1/1: nrf1\n")
    info("      Config file: nrf.yaml\n")
    nrf1 = net.addDocker('nrf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/nrf.yaml:/opt/open5gs/etc/open5gs/nrf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add SCP (1 instances)\n")
    info("    Creating SCP instance 1/1: scp1\n")
    info("      Config file: scp.yaml\n")
    scp1 = net.addDocker('scp1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/scp.yaml:/opt/open5gs/etc/open5gs/scp.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add AUSF (1 instances)\n")
    info("    Creating AUSF instance 1/1: ausf1\n")
    info("      Config file: ausf.yaml\n")
    ausf1 = net.addDocker('ausf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/ausf.yaml:/opt/open5gs/etc/open5gs/ausf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add BSF (1 instances)\n")
    info("    Creating BSF instance 1/1: bsf1\n")
    info("      Config file: bsf.yaml\n")
    bsf1 = net.addDocker('bsf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/bsf.yaml:/opt/open5gs/etc/open5gs/bsf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add NSSF (1 instances)\n")
    info("    Creating NSSF instance 1/1: nssf1\n")
    info("      Config file: nssf.yaml\n")
    nssf1 = net.addDocker('nssf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/nssf.yaml:/opt/open5gs/etc/open5gs/nssf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add PCF (1 instances)\n")
    info("    Creating PCF instance 1/1: pcf1\n")
    info("      Config file: pcf.yaml\n")
    pcf1 = net.addDocker('pcf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/pcf.yaml:/opt/open5gs/etc/open5gs/pcf.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add UDM (1 instances)\n")
    info("    Creating UDM instance 1/1: udm1\n")
    info("      Config file: udm.yaml\n")
    udm1 = net.addDocker('udm1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/udm.yaml:/opt/open5gs/etc/open5gs/udm.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add UDR (1 instances)\n")
    info("    Creating UDR instance 1/1: udr1\n")
    info("      Config file: udr.yaml\n")
    udr1 = net.addDocker('udr1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-541.1,-717.4,0', volumes=[export_dir + "/5g-configs/udr.yaml:/opt/open5gs/etc/open5gs/udr.yaml"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])

    info("*** Adding gNB with enhanced OVS/AP support\n")
    GNB__1 = net.addDocker('GNB__1', cap_add=["net_admin", "sys_nice"], network_mode=NETWORK_MODE, publish_all_ports=True, privileged=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=["/sys:/sys:ro", "/lib/modules:/lib/modules:ro"], position='-421.4,-52.9,0', environment={"AMF_HOSTNAME": "amf1", "GNB_HOSTNAME": "gnb1", "N2_IFACE": "eth0", "N3_IFACE": "eth0", "RADIO_IFACE": "eth0", "NETWORK_INTERFACE": "eth0", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "UERANSIM_COMPONENT": "gnb", "OVS_ENABLED": "true", "OVS_BRIDGE_NAME": "", "OVS_FAIL_MODE": "secure", "OPENFLOW_PROTOCOLS": "OpenFlow13", "OVS_DATAPATH": "kernel", "OVS_AUTO_SETUP": "true", "OVS_CONTROLLER": "tcp:netflux5g-onos-controller:6653", "CONTROLLER_IP": "netflux5g-onos-controller", "CONTROLLER_PORT": "6653", "BRIDGE_INTERFACES": "eth0", "BRIDGE_PRIORITY": "6", "STP_ENABLED": "true"})
    GNB__2 = net.addDocker('GNB__2', cap_add=["net_admin", "sys_nice"], network_mode=NETWORK_MODE, publish_all_ports=True, privileged=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=["/sys:/sys:ro", "/lib/modules:/lib/modules:ro"], position='298.7,-50.3,0', environment={"AMF_HOSTNAME": "amf1", "GNB_HOSTNAME": "gnb2", "N2_IFACE": "eth0", "N3_IFACE": "eth0", "RADIO_IFACE": "eth0", "NETWORK_INTERFACE": "eth0", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "UERANSIM_COMPONENT": "gnb", "OVS_ENABLED": "true", "OVS_BRIDGE_NAME": "", "OVS_FAIL_MODE": "secure", "OPENFLOW_PROTOCOLS": "OpenFlow13", "OVS_DATAPATH": "kernel", "OVS_AUTO_SETUP": "true", "OVS_CONTROLLER": "tcp:netflux5g-onos-controller:6653", "CONTROLLER_IP": "netflux5g-onos-controller", "CONTROLLER_PORT": "6653", "BRIDGE_INTERFACES": "eth0", "BRIDGE_PRIORITY": "6", "STP_ENABLED": "true"})
    # Add WiFi functionality if available
    if NETWORK_BACKEND in ["containernet", "mininet-wifi"] and hasattr(net, 'addAccessPoint'):
        # Full WiFi support available
        ap101 = net.addAccessPoint('ap101', cls=OVSKernelAP, ssid='gnb1-ssid', failMode='secure', datapath='kernel',
                                 channel='36', mode='a', position='-423.7,-52.9,0', range=600.0, txpower=24.0, protocols="OpenFlow13")
        ap102 = net.addAccessPoint('ap102', cls=OVSKernelAP, ssid='gnb2-ssid', failMode='secure', datapath='kernel', 
                                 channel='36', mode='a', position='298.7,-50.3,0', range=600.0, txpower=24.0, protocols="OpenFlow13")
    else:
        # Fallback to regular switches for access points
        print("‚ö†Ô∏è  WiFi not supported - using switches as AP fallback")
        ap101 = net.addSwitch('ap101', cls=OVSKernelSwitch, protocols="OpenFlow13")
        ap102 = net.addSwitch('ap102', cls=OVSKernelSwitch, protocols="OpenFlow13")

    info("*** Adding enhanced UERANSIM UE hosts\n")
    # Add UE nodes with appropriate backend
    if NETWORK_BACKEND in ["containernet", "mininet-wifi"] and hasattr(net, 'addStation'):
        # Full WiFi support - add as stations
        UE__6 = net.addStation('UE__6', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', range=116.0, txpower=20.0, position='329.1,163.3,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet", "MSISDN": "0000000003", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
        UE__5 = net.addStation('UE__5', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', range=116.0, txpower=20.0, position='279.8,-242.3,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet2", "MSISDN": "0000000013", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
        UE__4 = net.addStation('UE__4', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', range=116.0, txpower=20.0, position='-44.3,-44.8,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet2", "MSISDN": "0000000012", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
        UE__3 = net.addStation('UE__3', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', range=116.0, txpower=20.0, position='-319.1,93.5,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet2", "MSISDN": "0000000011", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
        UE__2 = net.addStation('UE__2', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', range=116.0, txpower=20.0, position='-545.7,65.9,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet", "MSISDN": "0000000002", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
        UE__1 = net.addStation('UE__1', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', range=116.0, txpower=20.0, position='-646.3,-127.1,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet", "MSISDN": "0000000001", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
    else:
        # Fallback to Docker containers using addDocker
        print("‚ö†Ô∏è  Adding UE nodes as Docker containers (no WiFi)")
        UE__6 = net.addDocker('UE__6', network_mode=NETWORK_MODE, dimage='adaptive/ueransim:latest')
        UE__5 = net.addDocker('UE__5', network_mode=NETWORK_MODE, dimage='adaptive/ueransim:latest')
        UE__4 = net.addDocker('UE__4', network_mode=NETWORK_MODE, dimage='adaptive/ueransim:latest')
        UE__3 = net.addDocker('UE__3', network_mode=NETWORK_MODE, dimage='adaptive/ueransim:latest')
        UE__2 = net.addDocker('UE__2', network_mode=NETWORK_MODE, dimage='adaptive/ueransim:latest')
        UE__1 = net.addDocker('UE__1', network_mode=NETWORK_MODE, dimage='adaptive/ueransim:latest')

    # Configure WiFi if available
    if NETWORK_BACKEND in ["containernet", "mininet-wifi"] and hasattr(net, 'setPropagationModel'):
        info("*** Configuring propagation model\n")
        net.setPropagationModel(model="logDistance", exp=3)
        
        info("*** Configuring nodes\n")
        net.configureWifiNodes()
        
        info("*** Connecting Docker nodes to APs\n")
        if hasattr(UE__1, 'cmd'):
            UE__1.cmd('iw dev UE__1-wlan0 connect gnb1-ssid')
            UE__2.cmd('iw dev UE__2-wlan0 connect gnb1-ssid')
            UE__3.cmd('iw dev UE__3-wlan0 connect gnb1-ssid')
            UE__4.cmd('iw dev UE__4-wlan0 connect gnb2-ssid')
            UE__5.cmd('iw dev UE__5-wlan0 connect gnb2-ssid')
            UE__6.cmd('iw dev UE__6-wlan0 connect gnb2-ssid')
    else:
        print("‚ö†Ô∏è  WiFi configuration skipped (not available)")
        # Skip WiFi-specific commands

    # Add regular hosts for testing
    h1 = net.addHost('h1')
    h2 = net.addHost('h2')
    h3 = net.addHost('h3')
    h4 = net.addHost('h4')
    h5 = net.addHost('h5')
    h6 = net.addHost('h6')
    h7 = net.addHost('h7')
    h8 = net.addHost('h8')

    info("*** Creating links\n")
    # Link APs to gNBs
    net.addLink(ap101, GNB__1)
    net.addLink(ap102, GNB__2)
    
    # 5G Core connections to multiple switches for redundancy
    net.addLink(Switch__4, amf1)
    net.addLink(Switch__4, upf1)
    net.addLink(Switch__4, upf2)
    net.addLink(Switch__4, smf1)
    net.addLink(Switch__3, amf1)
    net.addLink(Switch__3, upf1)
    net.addLink(Switch__3, upf2)
    net.addLink(Switch__3, smf1)
    
    # Link APs to switches
    net.addLink(Switch__2, ap102)
    net.addLink(Switch__1, ap101)

    # Switch-to-switch connections
    net.addLink(Switch__1, Switch__6)
    net.addLink(Switch__6, Switch__2)
    net.addLink(Switch__5, Switch__6)
    net.addLink(Switch__5, Switch__2)
    net.addLink(Switch__4, Switch__5)
    net.addLink(Switch__3, Switch__4)
    net.addLink(Switch__1, Switch__3)
    net.addLink(Switch__4, Switch__1)
    net.addLink(Switch__4, Switch__2)
    net.addLink(Switch__1, Switch__2)

    # Regular host connections
    net.addLink(Switch__2, h1)
    net.addLink(Switch__2, h2)
    net.addLink(Switch__3, h3)
    net.addLink(Switch__4, h4)
    net.addLink(Switch__5, h5)
    net.addLink(Switch__6, h6)
    net.addLink(ap101, h7)
    net.addLink(ap102, h8)

    if "-p" not in args:
        net.plotGraph(max_x=200, max_y=200)

    info("*** Starting network\n")
    net.build()
    Controller__1.start()

    info("*** Add links\n")
    net.plotGraph(max_x=1000, max_y=1000)

    info("*** Starting network\n")
    net.build()

    info("*** Starting controllers\n")
    Controller__1.start()

    info("*** Starting APs\n")
    net.get("ap101").start([Controller__1])
    net.get("ap102").start([Controller__1])
    net.get("Switch__6").start([Controller__1])
    net.get("Switch__5").start([Controller__1])
    net.get("Switch__4").start([Controller__1])
    net.get("Switch__3").start([Controller__1])
    net.get("Switch__2").start([Controller__1])
    net.get("Switch__1").start([Controller__1])

    info("*** Starting NRF components\n")
    makeTerm2(nrf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-nrfd 2>&1 | tee -a /logging/nrf1.log")

    info("*** Starting SCP components\n")
    makeTerm2(scp1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-scpd 2>&1 | tee -a /logging/scp1.log")

    info("*** Starting AUSF components\n")
    makeTerm2(ausf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-ausfd 2>&1 | tee -a /logging/ausf1.log")

    info("*** Starting UDM components\n")
    makeTerm2(udm1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-udmd 2>&1 | tee -a /logging/udm1.log")

    info("*** Starting UDR components\n")
    makeTerm2(udr1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-udrd 2>&1 | tee -a /logging/udr1.log")

    info("*** Starting PCF components\n")
    makeTerm2(pcf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-pcfd 2>&1 | tee -a /logging/pcf1.log")

    info("*** Starting BSF components\n")
    makeTerm2(bsf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-bsfd 2>&1 | tee -a /logging/bsf1.log")

    info("*** Starting NSSF components\n")
    makeTerm2(nssf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-nssfd 2>&1 | tee -a /logging/nssf1.log")

    info("*** Starting SMF components\n")
    makeTerm2(smf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-smfd 2>&1 | tee -a /logging/smf1.log")

    info("*** Starting AMF components\n")
    makeTerm2(amf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-amfd 2>&1 | tee -a /logging/amf1.log")

    info("*** Starting UPF components\n")
    makeTerm2(upf1, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/upf1.log")
    makeTerm2(upf2, cmd="/opt/open5gs/etc/open5gs/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/upf2.log")

    CLI.do_sh(net, "sleep 10")

    info("*** Starting enhanced UERANSIM gNB with OVS/AP support\n")
    info("*** Pre-configuring OVS for gNB GNB__1\n")
    # OVS_ENABLED environment variable will trigger setup in entrypoint\n")
    makeTerm2(GNB__1, cmd="/entrypoint.sh gnb 2>&1 | tee -a /logging/GNB__1.log")
    info("*** Pre-configuring OVS for gNB GNB__2\n")
    # OVS_ENABLED environment variable will trigger setup in entrypoint\n")
    makeTerm2(GNB__2, cmd="/entrypoint.sh gnb 2>&1 | tee -a /logging/GNB__2.log")

    CLI.do_sh(net, "sleep 15")  # Allow time for gNB and OVS setup

    info("*** Starting enhanced UERANSIM UE nodes\n")
    makeTerm2(UE__6, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__6.log")
    makeTerm2(UE__5, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__5.log")
    makeTerm2(UE__4, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__4.log")
    makeTerm2(UE__3, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__3.log")
    makeTerm2(UE__2, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__2.log")
    makeTerm2(UE__1, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__1.log")

    CLI.do_sh(net, "sleep 20")  # Allow time for UE registration and OVS setup

    info("*** Route traffic on UE for End-to-End and End-to-Edge Connection\n")
    UE__6.cmd("ip route add 10.45.0.0/16 dev uesimtun0")
    UE__5.cmd("ip route add 10.46.0.0/16 dev uesimtun0")
    UE__4.cmd("ip route add 10.46.0.0/16 dev uesimtun0")
    UE__3.cmd("ip route add 10.46.0.0/16 dev uesimtun0")
    UE__2.cmd("ip route add 10.45.0.0/16 dev uesimtun0")
    UE__1.cmd("ip route add 10.45.0.0/16 dev uesimtun0")

    info("*** Checking OVS status for enhanced UERANSIM components\n")
    CLI.do_sh(net, "sleep 5")  # Allow OVS setup to complete\n    
    makeTerm2(GNB__1, cmd="ovs-vsctl show || echo \"OVS not ready for GNB__1\"")
    makeTerm2(GNB__2, cmd="ovs-vsctl show || echo \"OVS not ready for GNB__2\"")

    info("*** Running CLI\n")
    CLI(net)

    info("*** Stopping network\n")
    net.stop()

    info("*** Additional network configuration for Docker stations\n")
    # Ensure proper MAC learning and forwarding on APs
    ap101.cmd('ovs-vsctl set bridge ap101 other-config:mac-aging-time=300')
    ap102.cmd('ovs-vsctl set bridge ap102 other-config:mac-aging-time=300')
    
    # Enable STP to prevent loops but ensure connectivity
    for switch in [Switch__1, Switch__2, Switch__3, Switch__4, Switch__5, Switch__6]:
        switch.cmd('ovs-vsctl set bridge {} stp_enable=true'.format(switch.name))
    
    # Configure OpenFlow tables for better packet handling
    info("*** Configuring OpenFlow rules for enhanced connectivity\n")
    # Add basic forwarding rules to ensure connectivity between APs
    Controller__1.cmd('ovs-ofctl add-flow ap101 "priority=1000,actions=CONTROLLER:65535"')
    Controller__1.cmd('ovs-ofctl add-flow ap102 "priority=1000,actions=CONTROLLER:65535"')

    info("*** Network connectivity verification commands\n")
    info("    Use these commands in CLI to debug connectivity:\n")
    info("    1. Check bridge status: nodes['ap101'].cmd('ovs-vsctl show')\n")
    info("    2. Check flows: nodes['ap101'].cmd('ovs-ofctl dump-flows ap101')\n")
    info("    3. Check MAC table: nodes['ap101'].cmd('ovs-appctl fdb/show ap101')\n")
    info("    4. Ping test: nodes['UE__1'].cmd('ping -c 3 <target_ip>')\n")
    info("    5. Check interfaces: nodes['UE__1'].cmd('ip addr show')\n")
    info("    6. Check wireless connection: nodes['UE__1'].cmd('iw dev')\n")
    
    # ...existing CLI code...
if __name__ == '__main__':
    setLogLevel('info')
    topology(sys.argv)
